[loggers]
keys=root, modeltimedrotating

[handlers]
keys=stdouthandler, timedrotatingfilehandler

[formatters]
keys=stdout, file


[logger_root]
level=DEBUG
handlers=stdouthandler

[logger_model]
level=DEBUG
handlers=filehandlerdebug, filehandlerwarning
propagate=0
qualname=model

[logger_modelrotating]
level=DEBUG
handlers=rotatingfilehandlerdebug
propagate=0
qualname=modelrotating

[logger_modeltimedrotating]
level=DEBUG
handlers=timedrotatingfilehandler
propagate=0
qualname=modeltimedrotating


[handler_stdouthandler]
class=StreamHandler
level=DEBUG
formatter=stdout
args=(sys.stdout, )

[handler_filehandlerdebug]
class=FileHandler
level=DEBUG
formatter=file
args=("log/main_debug.log", "a")

[handler_filehandlerwarning]
class=FileHandler
level=WARNING
formatter=file
args=("log/main_warning.log", "a")

[handler_rotatingfilehandlerdebug]
class=logging.handlers.RotatingFileHandler
level=DEBUG
formatter=file
args=("log/main_debug_root.log", 2000, 5)

[handler_timedrotatingfilehandlerdebug]
class=logging.handlers.TimedRotatingFileHandler
level=DEBUG
formatter=file
args=("log/main_debug_time.log", "m", 2, 10)


[formatter_stdout]
format="%(filename)s => %(funcName)s (line=%(lineno)d):\t%(message)s"

[formatter_file]
format="%(asctime)s [%(levelname)10s]    %(pathname)s [%(lineno)d] => %(funcName)s():    %(message)s"



# USAGE
# ========================================================

# Create config (.conf) file and creat logging object
# --------------------------------------------------------
# logging.config.fileConfig("logging.conf")
# self.logger = logging.getLogger("mainapptimedrotating")

# Close log handlers before terminating script/app
# --------------------------------------------------------
# for handler in self.logger.handlers:
#   handler.close()
# ========================================================